# coding: utf-8

"""
    Multilogin v2 Local API

    This API is intended to be used from version 5 of Multilogin for managing cloud saved browser profiles.   To start/stop browser profiles please use the [Multilogin v1 Local API](https://app.swaggerhub.com/apis/Multilogin/MultiloginLocalRestAPI/1.0). # Creating profiles To create a profile send a POST request to the /profile endpoint. The mandatory parameters are the name of the profile, operating system and type of browser. The rest of the fingerprint will be generated automatically, unless you specify more details.  Here is an example request to create a Mimic profile for windows with a proxy: <pre>{ <br>\"name\": \"testProfile\", <br>\"browser\": \"mimic\", <br>\"os\": \"win\", <br>\"network\": { <br>    \"proxy\": { <br>        \"type\": \"HTTP\", <br>        \"host\": \"192.168.1.1\", <br>        \"port\": \"1080\", <br>        \"username\": \"username\", <br>        \"password\": \"password\" <br>        } <br>    } <br>} </pre> # Groups Each group has an unique ID that can be assigned either during the creating of a profile or by updating a profile.  The default group ID is 00000000-0000-0000-0000-000000000000 for Unassigned  # noqa: E501

    OpenAPI spec version: v2-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'os': 'str',
        'browser': 'str',
        'group': 'str',
        'notes': 'str',
        'google_services': 'bool',
        'start_url': 'str',
        'enable_lock': 'bool',
        'navigator': 'Navigator',
        'storage': 'Storage',
        'network': 'Network',
        'plugins': 'Plugins',
        'timezone': 'Timezone',
        'geolocation': 'Geolocation',
        'audio_context': 'AudioContext',
        'canvas': 'Canvas',
        'fonts': 'Fonts',
        'media_devices': 'MediaDevices',
        'web_rtc': 'WebRTC',
        'web_gl': 'WebGL',
        'web_gl_metadata': 'WebGLMetadata',
        'extensions': 'CustomExtensions',
        'ports': 'Ports'
    }

    attribute_map = {
        'name': 'name',
        'os': 'os',
        'browser': 'browser',
        'group': 'group',
        'notes': 'notes',
        'google_services': 'googleServices',
        'start_url': 'startUrl',
        'enable_lock': 'enableLock',
        'navigator': 'navigator',
        'storage': 'storage',
        'network': 'network',
        'plugins': 'plugins',
        'timezone': 'timezone',
        'geolocation': 'geolocation',
        'audio_context': 'audioContext',
        'canvas': 'canvas',
        'fonts': 'fonts',
        'media_devices': 'mediaDevices',
        'web_rtc': 'webRTC',
        'web_gl': 'webGL',
        'web_gl_metadata': 'webGLMetadata',
        'extensions': 'extensions',
        'ports': 'ports'
    }

    def __init__(self, name=None, os=None, browser=None, group=None, notes=None, google_services=None, start_url=None, enable_lock=None, navigator=None, storage=None, network=None, plugins=None, timezone=None, geolocation=None, audio_context=None, canvas=None, fonts=None, media_devices=None, web_rtc=None, web_gl=None, web_gl_metadata=None, extensions=None, ports=None, _configuration=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._os = None
        self._browser = None
        self._group = None
        self._notes = None
        self._google_services = None
        self._start_url = None
        self._enable_lock = None
        self._navigator = None
        self._storage = None
        self._network = None
        self._plugins = None
        self._timezone = None
        self._geolocation = None
        self._audio_context = None
        self._canvas = None
        self._fonts = None
        self._media_devices = None
        self._web_rtc = None
        self._web_gl = None
        self._web_gl_metadata = None
        self._extensions = None
        self._ports = None
        self.discriminator = None

        self.name = name
        self.os = os
        self.browser = browser
        if group is not None:
            self.group = group
        if notes is not None:
            self.notes = notes
        if google_services is not None:
            self.google_services = google_services
        if start_url is not None:
            self.start_url = start_url
        if enable_lock is not None:
            self.enable_lock = enable_lock
        if navigator is not None:
            self.navigator = navigator
        if storage is not None:
            self.storage = storage
        if network is not None:
            self.network = network
        if plugins is not None:
            self.plugins = plugins
        if timezone is not None:
            self.timezone = timezone
        if geolocation is not None:
            self.geolocation = geolocation
        if audio_context is not None:
            self.audio_context = audio_context
        if canvas is not None:
            self.canvas = canvas
        if fonts is not None:
            self.fonts = fonts
        if media_devices is not None:
            self.media_devices = media_devices
        if web_rtc is not None:
            self.web_rtc = web_rtc
        if web_gl is not None:
            self.web_gl = web_gl
        if web_gl_metadata is not None:
            self.web_gl_metadata = web_gl_metadata
        if extensions is not None:
            self.extensions = extensions
        if ports is not None:
            self.ports = ports

    @property
    def name(self):
        """Gets the name of this Profile.  # noqa: E501

        Name of the profile  # noqa: E501

        :return: The name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Profile.

        Name of the profile  # noqa: E501

        :param name: The name of this Profile.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def os(self):
        """Gets the os of this Profile.  # noqa: E501

        Operating system for the profile. Android only available for mimic_mobile browser.  # noqa: E501

        :return: The os of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Profile.

        Operating system for the profile. Android only available for mimic_mobile browser.  # noqa: E501

        :param os: The os of this Profile.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")  # noqa: E501
        allowed_values = ["win", "mac", "lin", "android"]  # noqa: E501
        if (self._configuration.client_side_validation and
                os not in allowed_values):
            raise ValueError(
                "Invalid value for `os` ({0}), must be one of {1}"  # noqa: E501
                .format(os, allowed_values)
            )

        self._os = os

    @property
    def browser(self):
        """Gets the browser of this Profile.  # noqa: E501

        Type of browser. Mimic_mobile only available with Android operating system.  # noqa: E501

        :return: The browser of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this Profile.

        Type of browser. Mimic_mobile only available with Android operating system.  # noqa: E501

        :param browser: The browser of this Profile.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and browser is None:
            raise ValueError("Invalid value for `browser`, must not be `None`")  # noqa: E501
        allowed_values = ["mimic", "stealthfox", "mimic_mobile"]  # noqa: E501
        if (self._configuration.client_side_validation and
                browser not in allowed_values):
            raise ValueError(
                "Invalid value for `browser` ({0}), must be one of {1}"  # noqa: E501
                .format(browser, allowed_values)
            )

        self._browser = browser

    @property
    def group(self):
        """Gets the group of this Profile.  # noqa: E501

        ID of the group to which the profile is assigned to  # noqa: E501

        :return: The group of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Profile.

        ID of the group to which the profile is assigned to  # noqa: E501

        :param group: The group of this Profile.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def notes(self):
        """Gets the notes of this Profile.  # noqa: E501

        Notes for the profile visible in the application  # noqa: E501

        :return: The notes of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Profile.

        Notes for the profile visible in the application  # noqa: E501

        :param notes: The notes of this Profile.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def google_services(self):
        """Gets the google_services of this Profile.  # noqa: E501

        Enables google services wherever possible. This emulates normal browser behaviour to the maximum possible extent (experimental)  # noqa: E501

        :return: The google_services of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._google_services

    @google_services.setter
    def google_services(self, google_services):
        """Sets the google_services of this Profile.

        Enables google services wherever possible. This emulates normal browser behaviour to the maximum possible extent (experimental)  # noqa: E501

        :param google_services: The google_services of this Profile.  # noqa: E501
        :type: bool
        """

        self._google_services = google_services

    @property
    def start_url(self):
        """Gets the start_url of this Profile.  # noqa: E501

        Sets the page to be opened on profile launch.  # noqa: E501

        :return: The start_url of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._start_url

    @start_url.setter
    def start_url(self, start_url):
        """Sets the start_url of this Profile.

        Sets the page to be opened on profile launch.  # noqa: E501

        :param start_url: The start_url of this Profile.  # noqa: E501
        :type: str
        """

        self._start_url = start_url

    @property
    def enable_lock(self):
        """Gets the enable_lock of this Profile.  # noqa: E501

        Only available on teamwork plans. Enables active session lock so that multiple people wouldnt access the profile at the same time.  # noqa: E501

        :return: The enable_lock of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._enable_lock

    @enable_lock.setter
    def enable_lock(self, enable_lock):
        """Sets the enable_lock of this Profile.

        Only available on teamwork plans. Enables active session lock so that multiple people wouldnt access the profile at the same time.  # noqa: E501

        :param enable_lock: The enable_lock of this Profile.  # noqa: E501
        :type: bool
        """

        self._enable_lock = enable_lock

    @property
    def navigator(self):
        """Gets the navigator of this Profile.  # noqa: E501


        :return: The navigator of this Profile.  # noqa: E501
        :rtype: Navigator
        """
        return self._navigator

    @navigator.setter
    def navigator(self, navigator):
        """Sets the navigator of this Profile.


        :param navigator: The navigator of this Profile.  # noqa: E501
        :type: Navigator
        """

        self._navigator = navigator

    @property
    def storage(self):
        """Gets the storage of this Profile.  # noqa: E501


        :return: The storage of this Profile.  # noqa: E501
        :rtype: Storage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Profile.


        :param storage: The storage of this Profile.  # noqa: E501
        :type: Storage
        """

        self._storage = storage

    @property
    def network(self):
        """Gets the network of this Profile.  # noqa: E501


        :return: The network of this Profile.  # noqa: E501
        :rtype: Network
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Profile.


        :param network: The network of this Profile.  # noqa: E501
        :type: Network
        """

        self._network = network

    @property
    def plugins(self):
        """Gets the plugins of this Profile.  # noqa: E501


        :return: The plugins of this Profile.  # noqa: E501
        :rtype: Plugins
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins):
        """Sets the plugins of this Profile.


        :param plugins: The plugins of this Profile.  # noqa: E501
        :type: Plugins
        """

        self._plugins = plugins

    @property
    def timezone(self):
        """Gets the timezone of this Profile.  # noqa: E501


        :return: The timezone of this Profile.  # noqa: E501
        :rtype: Timezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Profile.


        :param timezone: The timezone of this Profile.  # noqa: E501
        :type: Timezone
        """

        self._timezone = timezone

    @property
    def geolocation(self):
        """Gets the geolocation of this Profile.  # noqa: E501


        :return: The geolocation of this Profile.  # noqa: E501
        :rtype: Geolocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """Sets the geolocation of this Profile.


        :param geolocation: The geolocation of this Profile.  # noqa: E501
        :type: Geolocation
        """

        self._geolocation = geolocation

    @property
    def audio_context(self):
        """Gets the audio_context of this Profile.  # noqa: E501


        :return: The audio_context of this Profile.  # noqa: E501
        :rtype: AudioContext
        """
        return self._audio_context

    @audio_context.setter
    def audio_context(self, audio_context):
        """Sets the audio_context of this Profile.


        :param audio_context: The audio_context of this Profile.  # noqa: E501
        :type: AudioContext
        """

        self._audio_context = audio_context

    @property
    def canvas(self):
        """Gets the canvas of this Profile.  # noqa: E501


        :return: The canvas of this Profile.  # noqa: E501
        :rtype: Canvas
        """
        return self._canvas

    @canvas.setter
    def canvas(self, canvas):
        """Sets the canvas of this Profile.


        :param canvas: The canvas of this Profile.  # noqa: E501
        :type: Canvas
        """

        self._canvas = canvas

    @property
    def fonts(self):
        """Gets the fonts of this Profile.  # noqa: E501


        :return: The fonts of this Profile.  # noqa: E501
        :rtype: Fonts
        """
        return self._fonts

    @fonts.setter
    def fonts(self, fonts):
        """Sets the fonts of this Profile.


        :param fonts: The fonts of this Profile.  # noqa: E501
        :type: Fonts
        """

        self._fonts = fonts

    @property
    def media_devices(self):
        """Gets the media_devices of this Profile.  # noqa: E501


        :return: The media_devices of this Profile.  # noqa: E501
        :rtype: MediaDevices
        """
        return self._media_devices

    @media_devices.setter
    def media_devices(self, media_devices):
        """Sets the media_devices of this Profile.


        :param media_devices: The media_devices of this Profile.  # noqa: E501
        :type: MediaDevices
        """

        self._media_devices = media_devices

    @property
    def web_rtc(self):
        """Gets the web_rtc of this Profile.  # noqa: E501


        :return: The web_rtc of this Profile.  # noqa: E501
        :rtype: WebRTC
        """
        return self._web_rtc

    @web_rtc.setter
    def web_rtc(self, web_rtc):
        """Sets the web_rtc of this Profile.


        :param web_rtc: The web_rtc of this Profile.  # noqa: E501
        :type: WebRTC
        """

        self._web_rtc = web_rtc

    @property
    def web_gl(self):
        """Gets the web_gl of this Profile.  # noqa: E501


        :return: The web_gl of this Profile.  # noqa: E501
        :rtype: WebGL
        """
        return self._web_gl

    @web_gl.setter
    def web_gl(self, web_gl):
        """Sets the web_gl of this Profile.


        :param web_gl: The web_gl of this Profile.  # noqa: E501
        :type: WebGL
        """

        self._web_gl = web_gl

    @property
    def web_gl_metadata(self):
        """Gets the web_gl_metadata of this Profile.  # noqa: E501


        :return: The web_gl_metadata of this Profile.  # noqa: E501
        :rtype: WebGLMetadata
        """
        return self._web_gl_metadata

    @web_gl_metadata.setter
    def web_gl_metadata(self, web_gl_metadata):
        """Sets the web_gl_metadata of this Profile.


        :param web_gl_metadata: The web_gl_metadata of this Profile.  # noqa: E501
        :type: WebGLMetadata
        """

        self._web_gl_metadata = web_gl_metadata

    @property
    def extensions(self):
        """Gets the extensions of this Profile.  # noqa: E501


        :return: The extensions of this Profile.  # noqa: E501
        :rtype: CustomExtensions
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this Profile.


        :param extensions: The extensions of this Profile.  # noqa: E501
        :type: CustomExtensions
        """

        self._extensions = extensions

    @property
    def ports(self):
        """Gets the ports of this Profile.  # noqa: E501


        :return: The ports of this Profile.  # noqa: E501
        :rtype: Ports
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Profile.


        :param ports: The ports of this Profile.  # noqa: E501
        :type: Ports
        """

        self._ports = ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Profile):
            return True

        return self.to_dict() != other.to_dict()
