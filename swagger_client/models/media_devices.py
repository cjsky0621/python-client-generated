# coding: utf-8

"""
    Multilogin v2 Local API

    This API is intended to be used from version 5 of Multilogin for managing cloud saved browser profiles.   To start/stop browser profiles please use the [Multilogin v1 Local API](https://app.swaggerhub.com/apis/Multilogin/MultiloginLocalRestAPI/1.0). # Creating profiles To create a profile send a POST request to the /profile endpoint. The mandatory parameters are the name of the profile, operating system and type of browser. The rest of the fingerprint will be generated automatically, unless you specify more details.  Here is an example request to create a Mimic profile for windows with a proxy: <pre>{ <br>\"name\": \"testProfile\", <br>\"browser\": \"mimic\", <br>\"os\": \"win\", <br>\"network\": { <br>    \"proxy\": { <br>        \"type\": \"HTTP\", <br>        \"host\": \"192.168.1.1\", <br>        \"port\": \"1080\", <br>        \"username\": \"username\", <br>        \"password\": \"password\" <br>        } <br>    } <br>} </pre> # Groups Each group has an unique ID that can be assigned either during the creating of a profile or by updating a profile.  The default group ID is 00000000-0000-0000-0000-000000000000 for Unassigned  # noqa: E501

    OpenAPI spec version: v2-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MediaDevices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'video_inputs': 'int',
        'audio_inputs': 'int',
        'audio_outputs': 'int'
    }

    attribute_map = {
        'mode': 'mode',
        'video_inputs': 'videoInputs',
        'audio_inputs': 'audioInputs',
        'audio_outputs': 'audioOutputs'
    }

    def __init__(self, mode=None, video_inputs=None, audio_inputs=None, audio_outputs=None, _configuration=None):  # noqa: E501
        """MediaDevices - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mode = None
        self._video_inputs = None
        self._audio_inputs = None
        self._audio_outputs = None
        self.discriminator = None

        self.mode = mode
        self.video_inputs = video_inputs
        self.audio_inputs = audio_inputs
        self.audio_outputs = audio_outputs

    @property
    def mode(self):
        """Gets the mode of this MediaDevices.  # noqa: E501


        :return: The mode of this MediaDevices.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MediaDevices.


        :param mode: The mode of this MediaDevices.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["REAL", "FAKE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mode not in allowed_values):
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def video_inputs(self):
        """Gets the video_inputs of this MediaDevices.  # noqa: E501


        :return: The video_inputs of this MediaDevices.  # noqa: E501
        :rtype: int
        """
        return self._video_inputs

    @video_inputs.setter
    def video_inputs(self, video_inputs):
        """Sets the video_inputs of this MediaDevices.


        :param video_inputs: The video_inputs of this MediaDevices.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and video_inputs is None:
            raise ValueError("Invalid value for `video_inputs`, must not be `None`")  # noqa: E501

        self._video_inputs = video_inputs

    @property
    def audio_inputs(self):
        """Gets the audio_inputs of this MediaDevices.  # noqa: E501


        :return: The audio_inputs of this MediaDevices.  # noqa: E501
        :rtype: int
        """
        return self._audio_inputs

    @audio_inputs.setter
    def audio_inputs(self, audio_inputs):
        """Sets the audio_inputs of this MediaDevices.


        :param audio_inputs: The audio_inputs of this MediaDevices.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and audio_inputs is None:
            raise ValueError("Invalid value for `audio_inputs`, must not be `None`")  # noqa: E501

        self._audio_inputs = audio_inputs

    @property
    def audio_outputs(self):
        """Gets the audio_outputs of this MediaDevices.  # noqa: E501


        :return: The audio_outputs of this MediaDevices.  # noqa: E501
        :rtype: int
        """
        return self._audio_outputs

    @audio_outputs.setter
    def audio_outputs(self, audio_outputs):
        """Sets the audio_outputs of this MediaDevices.


        :param audio_outputs: The audio_outputs of this MediaDevices.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and audio_outputs is None:
            raise ValueError("Invalid value for `audio_outputs`, must not be `None`")  # noqa: E501

        self._audio_outputs = audio_outputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MediaDevices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaDevices):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MediaDevices):
            return True

        return self.to_dict() != other.to_dict()
