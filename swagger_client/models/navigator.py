# coding: utf-8

"""
    Multilogin v2 Local API

    This API is intended to be used from version 5 of Multilogin for managing cloud saved browser profiles.   To start/stop browser profiles please use the [Multilogin v1 Local API](https://app.swaggerhub.com/apis/Multilogin/MultiloginLocalRestAPI/1.0). # Creating profiles To create a profile send a POST request to the /profile endpoint. The mandatory parameters are the name of the profile, operating system and type of browser. The rest of the fingerprint will be generated automatically, unless you specify more details.  Here is an example request to create a Mimic profile for windows with a proxy: <pre>{ <br>\"name\": \"testProfile\", <br>\"browser\": \"mimic\", <br>\"os\": \"win\", <br>\"network\": { <br>    \"proxy\": { <br>        \"type\": \"HTTP\", <br>        \"host\": \"192.168.1.1\", <br>        \"port\": \"1080\", <br>        \"username\": \"username\", <br>        \"password\": \"password\" <br>        } <br>    } <br>} </pre> # Groups Each group has an unique ID that can be assigned either during the creating of a profile or by updating a profile.  The default group ID is 00000000-0000-0000-0000-000000000000 for Unassigned  # noqa: E501

    OpenAPI spec version: v2-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Navigator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_agent': 'str',
        'resolution': 'str',
        'language': 'str',
        'platform': 'str',
        'do_not_track': 'str',
        'hardware_concurrency': 'int'
    }

    attribute_map = {
        'user_agent': 'userAgent',
        'resolution': 'resolution',
        'language': 'language',
        'platform': 'platform',
        'do_not_track': 'doNotTrack',
        'hardware_concurrency': 'hardwareConcurrency'
    }

    def __init__(self, user_agent=None, resolution=None, language=None, platform=None, do_not_track=None, hardware_concurrency=None, _configuration=None):  # noqa: E501
        """Navigator - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_agent = None
        self._resolution = None
        self._language = None
        self._platform = None
        self._do_not_track = None
        self._hardware_concurrency = None
        self.discriminator = None

        if user_agent is not None:
            self.user_agent = user_agent
        if resolution is not None:
            self.resolution = resolution
        if language is not None:
            self.language = language
        if platform is not None:
            self.platform = platform
        if do_not_track is not None:
            self.do_not_track = do_not_track
        if hardware_concurrency is not None:
            self.hardware_concurrency = hardware_concurrency

    @property
    def user_agent(self):
        """Gets the user_agent of this Navigator.  # noqa: E501


        :return: The user_agent of this Navigator.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this Navigator.


        :param user_agent: The user_agent of this Navigator.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def resolution(self):
        """Gets the resolution of this Navigator.  # noqa: E501


        :return: The resolution of this Navigator.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Navigator.


        :param resolution: The resolution of this Navigator.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def language(self):
        """Gets the language of this Navigator.  # noqa: E501


        :return: The language of this Navigator.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Navigator.


        :param language: The language of this Navigator.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def platform(self):
        """Gets the platform of this Navigator.  # noqa: E501


        :return: The platform of this Navigator.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Navigator.


        :param platform: The platform of this Navigator.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def do_not_track(self):
        """Gets the do_not_track of this Navigator.  # noqa: E501


        :return: The do_not_track of this Navigator.  # noqa: E501
        :rtype: str
        """
        return self._do_not_track

    @do_not_track.setter
    def do_not_track(self, do_not_track):
        """Sets the do_not_track of this Navigator.


        :param do_not_track: The do_not_track of this Navigator.  # noqa: E501
        :type: str
        """

        self._do_not_track = do_not_track

    @property
    def hardware_concurrency(self):
        """Gets the hardware_concurrency of this Navigator.  # noqa: E501


        :return: The hardware_concurrency of this Navigator.  # noqa: E501
        :rtype: int
        """
        return self._hardware_concurrency

    @hardware_concurrency.setter
    def hardware_concurrency(self, hardware_concurrency):
        """Sets the hardware_concurrency of this Navigator.


        :param hardware_concurrency: The hardware_concurrency of this Navigator.  # noqa: E501
        :type: int
        """

        self._hardware_concurrency = hardware_concurrency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Navigator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Navigator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Navigator):
            return True

        return self.to_dict() != other.to_dict()
