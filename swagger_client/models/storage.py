# coding: utf-8

"""
    Multilogin v2 Local API

    This API is intended to be used from version 5 of Multilogin for managing cloud saved browser profiles.   To start/stop browser profiles please use the [Multilogin v1 Local API](https://app.swaggerhub.com/apis/Multilogin/MultiloginLocalRestAPI/1.0). # Creating profiles To create a profile send a POST request to the /profile endpoint. The mandatory parameters are the name of the profile, operating system and type of browser. The rest of the fingerprint will be generated automatically, unless you specify more details.  Here is an example request to create a Mimic profile for windows with a proxy: <pre>{ <br>\"name\": \"testProfile\", <br>\"browser\": \"mimic\", <br>\"os\": \"win\", <br>\"network\": { <br>    \"proxy\": { <br>        \"type\": \"HTTP\", <br>        \"host\": \"192.168.1.1\", <br>        \"port\": \"1080\", <br>        \"username\": \"username\", <br>        \"password\": \"password\" <br>        } <br>    } <br>} </pre> # Groups Each group has an unique ID that can be assigned either during the creating of a profile or by updating a profile.  The default group ID is 00000000-0000-0000-0000-000000000000 for Unassigned  # noqa: E501

    OpenAPI spec version: v2-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Storage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local': 'bool',
        'extensions': 'bool',
        'bookmarks': 'bool',
        'history': 'bool',
        'passwords': 'bool',
        'service_worker_cache': 'bool'
    }

    attribute_map = {
        'local': 'local',
        'extensions': 'extensions',
        'bookmarks': 'bookmarks',
        'history': 'history',
        'passwords': 'passwords',
        'service_worker_cache': 'serviceWorkerCache'
    }

    def __init__(self, local=None, extensions=None, bookmarks=None, history=None, passwords=None, service_worker_cache=None, _configuration=None):  # noqa: E501
        """Storage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._local = None
        self._extensions = None
        self._bookmarks = None
        self._history = None
        self._passwords = None
        self._service_worker_cache = None
        self.discriminator = None

        if local is not None:
            self.local = local
        if extensions is not None:
            self.extensions = extensions
        if bookmarks is not None:
            self.bookmarks = bookmarks
        if history is not None:
            self.history = history
        if passwords is not None:
            self.passwords = passwords
        if service_worker_cache is not None:
            self.service_worker_cache = service_worker_cache

    @property
    def local(self):
        """Gets the local of this Storage.  # noqa: E501


        :return: The local of this Storage.  # noqa: E501
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this Storage.


        :param local: The local of this Storage.  # noqa: E501
        :type: bool
        """

        self._local = local

    @property
    def extensions(self):
        """Gets the extensions of this Storage.  # noqa: E501


        :return: The extensions of this Storage.  # noqa: E501
        :rtype: bool
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this Storage.


        :param extensions: The extensions of this Storage.  # noqa: E501
        :type: bool
        """

        self._extensions = extensions

    @property
    def bookmarks(self):
        """Gets the bookmarks of this Storage.  # noqa: E501


        :return: The bookmarks of this Storage.  # noqa: E501
        :rtype: bool
        """
        return self._bookmarks

    @bookmarks.setter
    def bookmarks(self, bookmarks):
        """Sets the bookmarks of this Storage.


        :param bookmarks: The bookmarks of this Storage.  # noqa: E501
        :type: bool
        """

        self._bookmarks = bookmarks

    @property
    def history(self):
        """Gets the history of this Storage.  # noqa: E501


        :return: The history of this Storage.  # noqa: E501
        :rtype: bool
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this Storage.


        :param history: The history of this Storage.  # noqa: E501
        :type: bool
        """

        self._history = history

    @property
    def passwords(self):
        """Gets the passwords of this Storage.  # noqa: E501


        :return: The passwords of this Storage.  # noqa: E501
        :rtype: bool
        """
        return self._passwords

    @passwords.setter
    def passwords(self, passwords):
        """Sets the passwords of this Storage.


        :param passwords: The passwords of this Storage.  # noqa: E501
        :type: bool
        """

        self._passwords = passwords

    @property
    def service_worker_cache(self):
        """Gets the service_worker_cache of this Storage.  # noqa: E501

        If localStorage (local) is false, then serviceWorkerCache cannot be true  # noqa: E501

        :return: The service_worker_cache of this Storage.  # noqa: E501
        :rtype: bool
        """
        return self._service_worker_cache

    @service_worker_cache.setter
    def service_worker_cache(self, service_worker_cache):
        """Sets the service_worker_cache of this Storage.

        If localStorage (local) is false, then serviceWorkerCache cannot be true  # noqa: E501

        :param service_worker_cache: The service_worker_cache of this Storage.  # noqa: E501
        :type: bool
        """

        self._service_worker_cache = service_worker_cache

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Storage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Storage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Storage):
            return True

        return self.to_dict() != other.to_dict()
